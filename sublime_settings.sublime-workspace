{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"inl",
				"inline-block"
			],
			[
				"wi",
				"width"
			]
		]
	},
	"buffers":
	[
		{
			"file": "_posts/2017-10-03-microservice-message-solutions.md",
			"settings":
			{
				"buffer_size": 3882,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"contents": "Searching 41 files for \"#\"\n\nC:\\Users\\ThomasK\\Documents\\Projects\\kleinendorst.github.io\\_config.yml:\n    1: # Setup\n    2  title:        Reactive blog\n    3  tagline:      Disovering Reactive systems\n    .\n    5  paginate:     1\n    6  \n    7: # About/contact\n    8  author:\n    9    name:       Thomas Kleinendorst\n   10    url:        http://kleinendorst.eu \n   11  \n   12: # Gems\n   13  gems:\n   14    - jekyll-paginate\n   15  \n   16: # Theme\n   17: # theme: jekyll-theme-cayman\n   18  \n   19: #Others\n   20  markdown: kramdown\n   21  \n   22: # Comments\n   23  comments:\n   24    provider: disqus\n\nC:\\Users\\ThomasK\\Documents\\Projects\\kleinendorst.github.io\\jekyll-cayman-theme.gemspec:\n    1: # coding: utf-8\n    2  \n    3  Gem::Specification.new do |spec|\n\nC:\\Users\\ThomasK\\Documents\\Projects\\kleinendorst.github.io\\_includes\\head.html:\n    3    <title>{{ site.title }}</title>\n    4    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no\" />\n    5:   <meta name=\"theme-color\" content=\"#157878\">\n    6    <link rel=\"stylesheet\" href=\"{{ site.baseurl }}/css/normalize.css\">\n    7    <link href='https://fonts.googleapis.com/css?family=Open+Sans:400,700' rel='stylesheet' type='text/css'>\n\nC:\\Users\\ThomasK\\Documents\\Projects\\kleinendorst.github.io\\_posts\\2017-09-22-actor-model-introduction.md:\n   11  The actor model has been around since 1973, and was created to ease the development of big asynchronous systems, which didn’t exist at that time. Actors decouple software entities even further than objects can do in OOP[^1] systems. Actors are a good way to solve concurrency problems like the ones we discussed in the previous article. Let’s first see how the actor model works.\n   12  \n   13: ## The actor model\n   14  A software application implementing the actor system will have actors as logical entities. Actors are software entities with the following properties:\n   15  \n   ..\n   38  try/catch clauses are not helpful when working across threads. As we’ll see in the [next article]({{page.next.url}}) supervisors are also responsible for handling failures of their children. \n   39  \n   40: ## Practical example\n   41  Let’s try to solve our weather problem by the use of actors. In this example we will work with Java again. To use actors in Java we can use the libraries provided by Akka[^2].\n   42  \n   ..\n   64  7. The `WeatherManager` prints the result to the console.\n   65  \n   66: ## Implementation\n   67  \n   68  First we create the `ActorSystem`:\n   ..\n  324  We can send multiple messages to the `WeatherManager` instance and we’ll see that each `ComparePredictionRequest` is also processed in parallel. The big advantage of using the actor system here is that, although we didn’t really had to think about concurrency, we created a system that parallels a couple of subtasks. Running our task 100 times will finish in exactly the same time as running it once (given that our system has enough threads/processing power), that’s a 100x speed increase when compared to a synchronous system.\n  325  \n  326: ## Conclusion\n  327  Coding with actors isn’t all that different than coding regular objects (in OOP programming), thus not a big step to take for developers. By allowing software entities to run in their own threads, it becomes easy to run multiple processes in parallel. Because each actor handles data mutation only on its own data fields (synchronously) you never have to concern yourself with locking or using Atomic variables. \n  328  In order to achieve the best results the developer will have to make sure he doesn’t send mutable values between actors. Also because all actors run their code synchronously the developer should be aware that supervisors shouldn’t be used for heavy lifting, when they do they create bottlenecks. \n\nC:\\Users\\ThomasK\\Documents\\Projects\\kleinendorst.github.io\\_posts\\2017-09-22-asynchronous-java.md:\n    8  In order to properly scale applications, asynchronous task handling is key. The principal of asynchronous systems can be achieved on both application and architectural level. In this article we will discuss blocking I/O and its disadvantages, as well as how to implement nonblocking I/O. The examples in this article will be written in Java, but apply to most modern programming languages.\n    9  \n   10: ## Blocking I/O\n   11  In source code the compiler searches for an order in which to resolve expressions. The compiler keeps track of its current tasks in a FILO (first in last out) array called the \"call stack\". Let’s look at how this works: \n   12  \n   ..\n   37  When the call stack is waiting for a return value, in this case from the `WeatherService`, it can’t execute additional code. In our case this means that our task will take more time. In the case of a visual application, the GUI will freeze and not respond to user input. To solve these kind of issues, we use multi-threading.\n   38  \n   39: ## Multi-threading NIO\n   40  NI/O (non blocking I/O) is achieved by reserving software threads[^2]. Reserving threads is not supported by all modern programming languages[^3], but it is supported in Java. Let’s look at an example:\n   41  \n\nC:\\Users\\ThomasK\\Documents\\Projects\\kleinendorst.github.io\\_posts\\2017-09-25-actor-model-supervision.md:\n   10  In this article we’ll discuss the supervision strategy concept. We’ll discover the different kinds of supervision strategies and how they make your actors more fault resilient. \n   11  \n   12: ## The problem\n   13  In traditional object oriented programming we write try/catch blocks when we foresee something going wrong, like accessing a database (that might be down). Let’s look at our synchronous weather example again to see how we handle errors. \n   14  \n   ..\n   83  Now the problem with this approach in the actor system is named in the last sentence: *“escalated to handle higher in the call stack”*. Tasks that are delegated to an actor are requested in a fire and forget fashion. The actor that receives the message doesn’t run in the same thread and has its own call stack. When something nasty happens in this call stack, there is no way to escalate this error to its caller.\n   84  \n   85: ## Supervision\n   86  In actor systems, try/catch blocks are rarely written and considered bad practice in most cases. The preferred method is to fail the actor entirely and let its parent decide what to do next. Each actor defines a so called “supervision strategy” which is configuration that tells the actor how to handle failing children. Let’s look how this is configured:\n   87  \n   ..\n  137  **Example 3:** A child actor that’s task is accessing the database fails by throwing a `TimeoutException`, you know that a central discovery service will restart the database shortly. Now it’s a good time to use the **Restart** strategy (when you don’t care about its state) or **Resume** (when you do). \n  138  \n  139: ## The weather example\n  140  Let’s implement this knowledge into the weather example:\n  141  \n  ...\n  282  \n  283  \n  284: ## Conclusion\n  285  By thinking about supervision strategies in our actors, we can configure the system in such a way that failing tasks could be sensibly retried and errors are handled at the right level. Failing components don’t crash the entire system (in most cases) and only corrupted data will be reprocessed. The actor system pushes the developer to decouple their entities.\n  286  \n\nC:\\Users\\ThomasK\\Documents\\Projects\\kleinendorst.github.io\\_posts\\2017-09-29-reactive-streams.md:\n   10  In this article we shall take a look at reactive streams. First we’ll discover how reactive streams work, what problems they solve and how this fits into our asynchronous journey. We’ll finish this article by rewriting our weather example to use reactive streams. \n   11  \n   12: # Reactive streams\n   13  Reactive streams are an embodiment of the publish-subscribe pattern, which passes data in a  type safe manner to build pipelines in which data can be send over an asynchronous boundary. This definition is a bit abstract, so we'll look at these streams piece by piece. \n   14  \n   15: ## Origin\n   16  The idea of reactive streams originates from somewhere in 2013 and was pioneered by Netflix, Pivotal and Lightbend[^1]. This group of companies created an open format which reactive streams libraries can implement in order to stay interoperable with each other. The original specification can be found [here](http://www.reactive-streams.org/) and consists of a lightweight jar with 4 interfaces. This interface specification is now part of Java 9 as the [Flow class](http://download.java.net/java/jdk9/docs/api/java/util/concurrent/Flow.html). \n   17  \n   18  Implementations of the reactive streams specification includes Netflix [RXJava](http://reactivex.io/) (as part of the ReactiveX project), Pivotals [Project Reactor](http://projectreactor.io/) and Lightbends [Akka Streams](http://doc.akka.io/docs/akka/2.5/scala/stream/index.html). These libraries each provide their own publishers, operators and subscribers. Besides the reactive streams libraries themselves, some new versions of technologies added libraries that support working with publishers and subscribers, most notably is Spring 5 which enables web programming using reactive streams.\n   19  \n   20: ## So what are these streams?\n   21  The reactive streams specification exists of four elements: \n   22  \n   ..\n   92  > **A.** You can check this by cloning the [code on Github](https://github.com/Kleinendorst/reactive-example) and adding: `System.out.println(Thread.currentThread());` in both subscribe callbacks and you’ll see that this isn’t the case. \n   93  \n   94: ## Operators\n   95: The Reactive libraries come with operators that handle common operations that might take multiple lines of code normally. Some operators are the same as [Java 8’s streaming API]( http://www.oracle.com/technetwork/articles/java/ma14-java-se-8-streams-2177646.html), which is not surprising because lists of items can sometimes be handled the same way as items coming in asynchronously. Other operators are specific to the Streaming semantics, such as [`onBackpressureBuffer`](http://projectreactor.io/docs/core/release/api/reactor/core/publisher/Flux.html#onBackpressureBuffer-int-). \n   96  \n   97  Operators always return a new `Publisher` object which makes it possible to chain operations. Transformations made by operators are best described in marble diagrams:\n   ..\n   99  {% include image.html \n  100    url=\"/assets/reactive_streams/delayonnext.png\" \n  101:   description=\"<b>Fig. 1: </b>source: <a href=\\\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Flux.html#delayElements-java.time.Duration-\\\">Project Reactor Docs</a>\" %}\n  102  \n  103  Marble diagrams show publishers as arrows. The line shows time from left to right. The perpendicular line shows when a publisher is complete. Each marble shows an emitted message. In the middle we see the function, including provided parameters. At the bottom of the diagram we see the resulting publisher outputted by the operator function. \n  ...\n  105  These marble diagrams are actually so helpful that they are provided for most operator in the [JavaDoc](http://projectreactor.io/docs/core/release/api/). \n  106  \n  107: ## Using operators\n  108  Let’s look at an example where the use of operators shine: \n  109  \n  ...\n  156  To understand this code, just try to decipher it using the [API page](https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Flux.html) as an exercise. \n  157  \n  158: ## Back pressure\n  159  Back pressure is something that was recently added as part of the reactive streams specification. Back pressure means that subscribers only relieve publishers of messages once the subscribers are ready to receive new messages. \n  160  \n  ...\n  185  Back pressure is called using a pull based mechanism. Pull based mechanisms have the disadvantage of not allowing publishers to work at full speed when the subscribers can handle the total workload. The reactive specification even has an answer to this drawback. Subscribers can request more messages, thus buffering a **bounded** amount of messages themselves. If a subscriber requests more messages than the publisher has available, the publisher switches to a push mechanism for at least the amount of messages that are requested by the publisher. \n  186  \n  187: ## Weather example\n  188  Let’s rewrite the asynchronous part of our weather application using these streams. \n  189  We start by writing our `WeatherService` that provides a fake, blocking, method. \n  ...\n  272    description=\"<b>Fig 8: </b>Complete weather stream  \" %}\n  273  \n  274: ## Conclusion\n  275  Using reactive streams allows us to write code that handles concurrency problems with elegance. We can be sure that streams that we write can consume and publish data to other libraries by implementing Java 9s new `Flow` class. Finally, by ensuring back pressure is communicated throughout the stream, we ensure buffer problems are handled at the right level. \n  276  \n\nC:\\Users\\ThomasK\\Documents\\Projects\\kleinendorst.github.io\\_posts\\2017-10-03-microservice-message-solutions.md:\n   14  Akka HTTP, which allows us to connect actors between different services and finally message brokers.\n   15  \n   16: ## REST\n   17  The most simple form of inter-service communication would be direct communication with REST.\n   18  Each service provides endpoints to which other services can talk. When a service sends a message to \n   ..\n   32  \n   33  Inter-service communication via REST resembles the way we made \n   34: [direct calls  between Java methods]({% post_url 2017-09-22-asynchronous-java %}#blocking-io) and shares its disadvantages.\n   35  Threads at multiple services need to block in order to handle a single task.\n   36  \n   ..\n   43  > Service discovery is easier with tools such as [Consul](https://www.consul.io/) but still requires work in your services.\n   44  \n   45: ## Akka cluster\n   46  We looked at the actor system earlier, which can be implemented using [Akka actors](https://doc.akka.io/docs/akka/current/scala/actors.html).\n   47  Akka also provides a way for actors to communicate over the network using [Akka cluster](https://doc.akka.io/docs/akka/2.5/scala/common/cluster.html).\n\nC:\\Users\\ThomasK\\Documents\\Projects\\kleinendorst.github.io\\_site\\index.html:\n    6    <title>Reactive blog</title>\n    7    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no\" />\n    8:   <meta name=\"theme-color\" content=\"#157878\">\n    9    <link rel=\"stylesheet\" href=\"/css/normalize.css\">\n   10    <link href='https://fonts.googleapis.com/css?family=Open+Sans:400,700' rel='stylesheet' type='text/css'>\n\nC:\\Users\\ThomasK\\Documents\\Projects\\kleinendorst.github.io\\_site\\jekyll-cayman-theme.gemspec:\n    1: # coding: utf-8\n    2  \n    3  Gem::Specification.new do |spec|\n\nC:\\Users\\ThomasK\\Documents\\Projects\\kleinendorst.github.io\\_site\\css\\cayman.css:\n    3  .highlight table pre { margin: 0; }\n    4  \n    5: .highlight .cm { color: #999988; font-style: italic; }\n    6  \n    7: .highlight .cp { color: #999999; font-weight: bold; }\n    8  \n    9: .highlight .c1 { color: #999988; font-style: italic; }\n   10  \n   11: .highlight .cs { color: #999999; font-weight: bold; font-style: italic; }\n   12  \n   13: .highlight .c, .highlight .cd { color: #999988; font-style: italic; }\n   14  \n   15: .highlight .err { color: #a61717; background-color: #e3d2d2; }\n   16  \n   17: .highlight .gd { color: #000000; background-color: #ffdddd; }\n   18  \n   19: .highlight .ge { color: #000000; font-style: italic; }\n   20  \n   21: .highlight .gr { color: #aa0000; }\n   22  \n   23: .highlight .gh { color: #999999; }\n   24  \n   25: .highlight .gi { color: #000000; background-color: #ddffdd; }\n   26  \n   27: .highlight .go { color: #888888; }\n   28  \n   29: .highlight .gp { color: #555555; }\n   30  \n   31  .highlight .gs { font-weight: bold; }\n   32  \n   33: .highlight .gu { color: #aaaaaa; }\n   34  \n   35: .highlight .gt { color: #aa0000; }\n   36  \n   37: .highlight .kc { color: #000000; font-weight: bold; }\n   38  \n   39: .highlight .kd { color: #000000; font-weight: bold; }\n   40  \n   41: .highlight .kn { color: #000000; font-weight: bold; }\n   42  \n   43: .highlight .kp { color: #000000; font-weight: bold; }\n   44  \n   45: .highlight .kr { color: #000000; font-weight: bold; }\n   46  \n   47: .highlight .kt { color: #445588; font-weight: bold; }\n   48  \n   49: .highlight .k, .highlight .kv { color: #000000; font-weight: bold; }\n   50  \n   51: .highlight .mf { color: #009999; }\n   52  \n   53: .highlight .mh { color: #009999; }\n   54  \n   55: .highlight .il { color: #009999; }\n   56  \n   57: .highlight .mi { color: #009999; }\n   58  \n   59: .highlight .mo { color: #009999; }\n   60  \n   61: .highlight .m, .highlight .mb, .highlight .mx { color: #009999; }\n   62  \n   63: .highlight .sb { color: #d14; }\n   64  \n   65: .highlight .sc { color: #d14; }\n   66  \n   67: .highlight .sd { color: #d14; }\n   68  \n   69: .highlight .s2 { color: #d14; }\n   70  \n   71: .highlight .se { color: #d14; }\n   72  \n   73: .highlight .sh { color: #d14; }\n   74  \n   75: .highlight .si { color: #d14; }\n   76  \n   77: .highlight .sx { color: #d14; }\n   78  \n   79: .highlight .sr { color: #009926; }\n   80  \n   81: .highlight .s1 { color: #d14; }\n   82  \n   83: .highlight .ss { color: #990073; }\n   84  \n   85: .highlight .s { color: #d14; }\n   86  \n   87: .highlight .na { color: #008080; }\n   88  \n   89: .highlight .bp { color: #999999; }\n   90  \n   91: .highlight .nb { color: #0086B3; }\n   92  \n   93: .highlight .nc { color: #445588; font-weight: bold; }\n   94  \n   95: .highlight .no { color: #008080; }\n   96  \n   97: .highlight .nd { color: #3c5d5d; font-weight: bold; }\n   98  \n   99: .highlight .ni { color: #800080; }\n  100  \n  101: .highlight .ne { color: #990000; font-weight: bold; }\n  102  \n  103: .highlight .nf { color: #990000; font-weight: bold; }\n  104  \n  105: .highlight .nl { color: #990000; font-weight: bold; }\n  106  \n  107: .highlight .nn { color: #555555; }\n  108  \n  109: .highlight .nt { color: #000080; }\n  110  \n  111: .highlight .vc { color: #008080; }\n  112  \n  113: .highlight .vg { color: #008080; }\n  114  \n  115: .highlight .vi { color: #008080; }\n  116  \n  117: .highlight .nv { color: #008080; }\n  118  \n  119: .highlight .ow { color: #000000; font-weight: bold; }\n  120  \n  121: .highlight .o { color: #000000; font-weight: bold; }\n  122  \n  123: .highlight .w { color: #bbbbbb; }\n  124  \n  125: .highlight { background-color: #f8f8f8; }\n  126  \n  127  * { box-sizing: border-box; }\n  128  \n  129: body { padding: 0; margin: 0; font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif; font-size: 16px; line-height: 1.5; color: #606c71; }\n  130  \n  131: a { color: #1e6bb8; text-decoration: none; }\n  132  a:hover { text-decoration: underline; }\n  133  \n  ...\n  140    .btn + .btn { margin-top: 1rem; margin-left: 0; } }\n  141  \n  142: .page-header { color: #fff; text-align: center; background-color: #159957; background-image: linear-gradient(120deg, #155799, #159957); }\n  143  @media screen and (min-width: 64em) { .page-header { padding: 5rem 6rem; } }\n  144  @media screen and (min-width: 42em) and (max-width: 64em) { .page-header { padding: 3rem 4rem; } }\n  ...\n  161  @media screen and (max-width: 42em) { .main-content { padding: 2rem 1rem; font-size: 1rem; } }\n  162  .main-content img { max-width: 100%; }\n  163: .main-content h1, .main-content h2, .main-content h3, .main-content h4, .main-content h5, .main-content h6 { margin-top: 2rem; margin-bottom: 1rem; font-weight: normal; color: #159957; }\n  164  .main-content p { margin-bottom: 1em; }\n  165: .main-content code { padding: 2px 4px; font-family: Consolas, \"Liberation Mono\", Menlo, Courier, monospace; font-size: 0.9rem; color: #567482; background-color: #f3f6fa; border-radius: 0.3rem; }\n  166: .main-content pre { padding: 0.8rem; margin-top: 0; margin-bottom: 1rem; font: 1rem Consolas, \"Liberation Mono\", Menlo, Courier, monospace; color: #567482; word-wrap: normal; background-color: #f3f6fa; border: solid 1px #dce6f0; border-radius: 0.3rem; }\n  167: .main-content pre > code { padding: 0; margin: 0; font-size: 0.9rem; color: #567482; word-break: normal; white-space: pre; background: transparent; border: 0; }\n  168  .main-content .highlight { margin-bottom: 1rem; }\n  169  .main-content .highlight pre { margin-bottom: 0; word-break: normal; }\n  ...\n  172  .main-content pre code:before, .main-content pre code:after, .main-content pre tt:before, .main-content pre tt:after { content: normal; }\n  173  .main-content ul, .main-content ol { margin-top: 0; }\n  174: .main-content blockquote { padding: 0 1rem; margin-left: 0; color: #819198; border-left: 0.3rem solid #dce6f0; }\n  175  .main-content blockquote > :first-child { margin-top: 0; }\n  176  .main-content blockquote > :last-child { margin-bottom: 0; }\n  177  .main-content table { display: block; width: 100%; overflow: auto; word-break: normal; word-break: keep-all; -webkit-overflow-scrolling: touch; }\n  178  .main-content table th { font-weight: bold; }\n  179: .main-content table th, .main-content table td { padding: 0.5rem 1rem; border: 1px solid #e9ebec; }\n  180  .main-content dl { padding: 0; }\n  181  .main-content dl dt { padding: 0; margin-top: 1rem; font-size: 1rem; font-weight: bold; }\n  182  .main-content dl dd { padding: 0; margin-bottom: 1rem; }\n  183: .main-content hr { height: 2px; padding: 0; margin: 1rem 0; background-color: #eff0f1; border: 0; }\n  184  \n  185: .site-footer { padding-top: 2rem; margin-top: 2rem; border-top: solid 1px #eff0f1; }\n  186  @media screen and (min-width: 64em) { .site-footer { font-size: 1rem; } }\n  187  @media screen and (min-width: 42em) and (max-width: 64em) { .site-footer { font-size: 1rem; } }\n  ...\n  190  .site-footer-owner { display: block; font-weight: bold; }\n  191  \n  192: .site-footer-credits { color: #819198; }\n  193  \n\nC:\\Users\\ThomasK\\Documents\\Projects\\kleinendorst.github.io\\_site\\css\\custom.css:\n    1: #profile-pic {\n    2  \twidth: 100px;\n    3  \theight: 100px;\n    .\n   33  .image-container label {\n   34  \tfont-size: .8em;\n   35: \tcolor: #AAA;\n   36  }\n   37  \n\nC:\\Users\\ThomasK\\Documents\\Projects\\kleinendorst.github.io\\_site\\css\\normalize.css:\n  143  \n  144  mark {\n  145:   background: #ff0;\n  146:   color: #000;\n  147  }\n  148  \n  ...\n  375  \n  376  fieldset {\n  377:   border: 1px solid #c0c0c0;\n  378    margin: 0 2px;\n  379    padding: 0.35em 0.625em 0.75em;\n\nC:\\Users\\ThomasK\\Documents\\Projects\\kleinendorst.github.io\\_site\\main\\2017\\09\\22\\actor-model-introduction.html:\n    6    <title>Reactive blog</title>\n    7    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no\" />\n    8:   <meta name=\"theme-color\" content=\"#157878\">\n    9    <link rel=\"stylesheet\" href=\"/css/normalize.css\">\n   10    <link href='https://fonts.googleapis.com/css?family=Open+Sans:400,700' rel='stylesheet' type='text/css'>\n   ..\n   40  </blockquote>\n   41  \n   42: <p>The actor model has been around since 1973, and was created to ease the development of big asynchronous systems, which didn’t exist at that time. Actors decouple software entities even further than objects can do in OOP<sup id=\"fnref:1\"><a href=\"#fn:1\" class=\"footnote\">1</a></sup> systems. Actors are a good way to solve concurrency problems like the ones we discussed in the previous article. Let’s first see how the actor model works.</p>\n   43  \n   44  <h2 id=\"the-actor-model\">The actor model</h2>\n   ..\n   77  \n   78  <h2 id=\"practical-example\">Practical example</h2>\n   79: <p>Let’s try to solve our weather problem by the use of actors. In this example we will work with Java again. To use actors in Java we can use the libraries provided by Akka<sup id=\"fnref:2\"><a href=\"#fn:2\" class=\"footnote\">2</a></sup>.</p>\n   80  \n   81  <p>Our actor diagram will look like this:</p>\n   ..\n  394    <ol>\n  395      <li id=\"fn:1\">\n  396:       <p><a href=\"https://en.wikipedia.org/wiki/Object-oriented_programming\">Wikipedia</a> <a href=\"#fnref:1\" class=\"reversefootnote\">&#8617;</a></p>\n  397      </li>\n  398      <li id=\"fn:2\">\n  399:       <p><a href=\"http://doc.akka.io/docs/akka/current/scala/actors.html\">Akka</a> <a href=\"#fnref:2\" class=\"reversefootnote\">&#8617;</a></p>\n  400      </li>\n  401    </ol>\n\nC:\\Users\\ThomasK\\Documents\\Projects\\kleinendorst.github.io\\_site\\main\\2017\\09\\22\\asynchronous-java.html:\n    6    <title>Reactive blog</title>\n    7    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no\" />\n    8:   <meta name=\"theme-color\" content=\"#157878\">\n    9    <link rel=\"stylesheet\" href=\"/css/normalize.css\">\n   10    <link href='https://fonts.googleapis.com/css?family=Open+Sans:400,700' rel='stylesheet' type='text/css'>\n   ..\n   47  </code></pre></div></div>\n   48  \n   49: <p>Ordering in this example is resolved in a mathematically correct fashion, but languages also have some rules of their own<sup id=\"fnref:1\"><a href=\"#fn:1\" class=\"footnote\">1</a></sup>. Whenever an expression is finished, the next runnable line of code is executed. Notice that this next line of code can only be executed once the first line of code has finished executing, even though the second line isn’t dependent on the first line. \n   50  In simple examples, like the first example, this doesn’t pose much of a problem, but consider the following example:</p>\n   51  \n   ..\n   66  \n   67  <h2 id=\"multi-threading-nio\">Multi-threading NIO</h2>\n   68: <p>NI/O (non blocking I/O) is achieved by reserving software threads<sup id=\"fnref:2\"><a href=\"#fn:2\" class=\"footnote\">2</a></sup>. Reserving threads is not supported by all modern programming languages<sup id=\"fnref:3\"><a href=\"#fn:3\" class=\"footnote\">3</a></sup>, but it is supported in Java. Let’s look at an example:</p>\n   69  \n   70  <div class=\"language-java highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">class</span> <span class=\"nc\">Weather</span> <span class=\"o\">{</span>\n   ..\n  200  </code></pre></div></div>\n  201  \n  202: <p>We create <code class=\"highlighter-rouge\">Runnable</code> instances which will be the input for a new <code class=\"highlighter-rouge\">Thread</code> object we create. These <code class=\"highlighter-rouge\">Runnable</code> objects will perform their task inside a thread allocated by the JVM<sup id=\"fnref:4\"><a href=\"#fn:4\" class=\"footnote\">4</a></sup>, and therefore, will be ran in parallel. Now let’s compare the console output and see if this code was faster to execute:</p>\n  203  \n  204  <div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>Start getting the actual temperature:: running for: 12ms\n  ...\n  210  <p>There are also some downsides to using multithreading. We have to check after each <code class=\"highlighter-rouge\">Runnable</code> whether both values have been returned, because we don’t know the finishing order of <code class=\"highlighter-rouge\">Runnable</code> objects.</p>\n  211  \n  212: <p>Also mutable variables may become faulty if accessed by threads at the same time. In order to prevent corrupt data, one can use Java’s atomic variable types<sup id=\"fnref:5\"><a href=\"#fn:5\" class=\"footnote\">5</a></sup> or implement locking<sup id=\"fnref:6\"><a href=\"#fn:6\" class=\"footnote\">6</a></sup>. Both increase complexity in large systems. Also, bugs that result from accessing variables on different threads are hard to find.</p>\n  213  \n  214  <p>In the <a href=\"/main/2017/09/22/actor-model-introduction.html\">next article</a> we’ll have a look at the basics of the actor system, a model that was created specially for asynchronous computing. We’ll discover how the system works, how it solves concurrency problems and how to implement it in Java.</p>\n  ...\n  218    <ol>\n  219      <li id=\"fn:1\">\n  220:       <p>Some more associativity rules for Java can be found <a href=\"http://introcs.cs.princeton.edu/java/11precedence/\">here</a>. <a href=\"#fnref:1\" class=\"reversefootnote\">&#8617;</a></p>\n  221      </li>\n  222      <li id=\"fn:2\">\n  223:       <p>There is a difference between software and hardware threads: see <a href=\"https://stackoverflow.com/questions/5593328/software-threads-vs-hardware-threads\">this</a>. <a href=\"#fnref:2\" class=\"reversefootnote\">&#8617;</a></p>\n  224      </li>\n  225      <li id=\"fn:3\">\n  226:       <p>Like Javascript that uses promises to handle asynchronous tasks. <a href=\"https://developer.mozilla.org/nl/docs/Web/JavaScript/Reference/Global_Objects/Promise\">MDN page of promises</a> <a href=\"#fnref:3\" class=\"reversefootnote\">&#8617;</a></p>\n  227      </li>\n  228      <li id=\"fn:4\">\n  229:       <p><a href=\"https://nl.wikipedia.org/wiki/Java_Virtual_Machine\">Java virtual machine</a> <a href=\"#fnref:4\" class=\"reversefootnote\">&#8617;</a></p>\n  230      </li>\n  231      <li id=\"fn:5\">\n  232:       <p><a href=\"https://docs.oracle.com/javase/tutorial/essential/concurrency/atomicvars.html\">Atomic variables</a> <a href=\"#fnref:5\" class=\"reversefootnote\">&#8617;</a></p>\n  233      </li>\n  234      <li id=\"fn:6\">\n  235:       <p><a href=\"https://docs.oracle.com/javase/7/docs/api/java/util/concurrent/locks/Lock.html\">Locking</a> <a href=\"#fnref:6\" class=\"reversefootnote\">&#8617;</a></p>\n  236      </li>\n  237    </ol>\n\nC:\\Users\\ThomasK\\Documents\\Projects\\kleinendorst.github.io\\_site\\main\\2017\\09\\25\\actor-model-supervision.html:\n    6    <title>Reactive blog</title>\n    7    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no\" />\n    8:   <meta name=\"theme-color\" content=\"#157878\">\n    9    <link rel=\"stylesheet\" href=\"/css/normalize.css\">\n   10    <link href='https://fonts.googleapis.com/css?family=Open+Sans:400,700' rel='stylesheet' type='text/css'>\n   ..\n  225  </code></pre></div></div>\n  226  \n  227: <p>Each time we call the rest service it has a 50% fail change. When running the program a few times with logs configured to show actor lifecycle events in the log<sup id=\"fnref:1\"><a href=\"#fn:1\" class=\"footnote\">1</a></sup> we can discover the standard strategy used by Akka.</p>\n  228  \n  229  <p>The default behavior is to restart actors. When the strategy is never configured, as is the case here,the actor will be restarted but no new message will be present. Each actor defines the <code class=\"highlighter-rouge\">OneForOneStrategy</code>, this can be seen when either the actual or the predicted actor fails, only the lifecycle hooks of the failing actor are called. These hooks also make it apparent that <strong>restart</strong> is the default. In this case the actors are restarted.</p>\n  ...\n  336    <ol>\n  337      <li id=\"fn:1\">\n  338:       <p>Instructions can be found <a href=\"http://doc.akka.io/docs/akka/snapshot/scala/general/configuration.html\">here</a>. <a href=\"#fnref:1\" class=\"reversefootnote\">&#8617;</a></p>\n  339      </li>\n  340    </ol>\n\nC:\\Users\\ThomasK\\Documents\\Projects\\kleinendorst.github.io\\_site\\main\\2017\\09\\29\\reactive-streams.html:\n    6    <title>Reactive blog</title>\n    7    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no\" />\n    8:   <meta name=\"theme-color\" content=\"#157878\">\n    9    <link rel=\"stylesheet\" href=\"/css/normalize.css\">\n   10    <link href='https://fonts.googleapis.com/css?family=Open+Sans:400,700' rel='stylesheet' type='text/css'>\n   ..\n   46  \n   47  <h2 id=\"origin\">Origin</h2>\n   48: <p>The idea of reactive streams originates from somewhere in 2013 and was pioneered by Netflix, Pivotal and Lightbend<sup id=\"fnref:1\"><a href=\"#fn:1\" class=\"footnote\">1</a></sup>. This group of companies created an open format which reactive streams libraries can implement in order to stay interoperable with each other. The original specification can be found <a href=\"http://www.reactive-streams.org/\">here</a> and consists of a lightweight jar with 4 interfaces. This interface specification is now part of Java 9 as the <a href=\"http://download.java.net/java/jdk9/docs/api/java/util/concurrent/Flow.html\">Flow class</a>.</p>\n   49  \n   50  <p>Implementations of the reactive streams specification includes Netflix <a href=\"http://reactivex.io/\">RXJava</a> (as part of the ReactiveX project), Pivotals <a href=\"http://projectreactor.io/\">Project Reactor</a> and Lightbends <a href=\"http://doc.akka.io/docs/akka/2.5/scala/stream/index.html\">Akka Streams</a>. These libraries each provide their own publishers, operators and subscribers. Besides the reactive streams libraries themselves, some new versions of technologies added libraries that support working with publishers and subscribers, most notably is Spring 5 which enables web programming using reactive streams.</p>\n   ..\n   73    <li>We create a <code class=\"highlighter-rouge\">Publisher</code>. Our <code class=\"highlighter-rouge\">Publisher</code> is of type <code class=\"highlighter-rouge\">Flux&lt;T&gt;</code> which is one of the <code class=\"highlighter-rouge\">Publisher</code> types provided by Project Reactor. A number of simple factory functions are provided, like <code class=\"highlighter-rouge\">just()</code> which creates a <code class=\"highlighter-rouge\">Flux&lt;T&gt;</code> which emits its parameters as values.</li>\n   74    <li><code class=\"highlighter-rouge\">map()</code> is an operator function which means it returns <code class=\"highlighter-rouge\">Flux&lt;T&gt;</code> of it’s own. The <code class=\"highlighter-rouge\">map()</code> function takes all objects coming from our <code class=\"highlighter-rouge\">Publisher</code> and transforms it using a lambda, in our case applying the <code class=\"highlighter-rouge\">toUpperCase()</code> function to each <code class=\"highlighter-rouge\">String</code>.</li>\n   75:   <li>One of the advantages of reactive streams is that, most of them<sup id=\"fnref:2\"><a href=\"#fn:2\" class=\"footnote\">2</a></sup>, won’t perform any logic until subscribed to. If we leave out our <code class=\"highlighter-rouge\">subscribe()</code> function, our program wouldn’t do anything at all. Here we subscribe and call <code class=\"highlighter-rouge\">System.out.println()</code> for each <code class=\"highlighter-rouge\">String</code> object received.</li>\n   76  </ol>\n   77  \n   ..\n  127  \n  128  <h2 id=\"operators\">Operators</h2>\n  129: <p>The Reactive libraries come with operators that handle common operations that might take multiple lines of code normally. Some operators are the same as <a href=\"http://www.oracle.com/technetwork/articles/java/ma14-java-se-8-streams-2177646.html\">Java 8’s streaming API</a>, which is not surprising because lists of items can sometimes be handled the same way as items coming in asynchronously. Other operators are specific to the Streaming semantics, such as <a href=\"http://projectreactor.io/docs/core/release/api/reactor/core/publisher/Flux.html#onBackpressureBuffer-int-\"><code class=\"highlighter-rouge\">onBackpressureBuffer</code></a>.</p>\n  130  \n  131  <p>Operators always return a new <code class=\"highlighter-rouge\">Publisher</code> object which makes it possible to chain operations. Transformations made by operators are best described in marble diagrams:</p>\n  ...\n  134  \t<div class=\"image-container\">\n  135  \t\t<img src=\"/assets/reactive_streams/delayonnext.png\" alt=\"image\" style=\"\" />\n  136: \t\t<label class=\"caption\"><b>Fig. 1: </b>source: <a href=\"https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Flux.html#delayElements-java.time.Duration-\">Project Reactor Docs</a></label>\n  137  \t</div>\n  138  </div>\n  ...\n  335    <ol>\n  336      <li id=\"fn:1\">\n  337:       <p>Lightbend is the developer of the Akka streams we saw in an earlier article <a href=\"#fnref:1\" class=\"reversefootnote\">&#8617;</a></p>\n  338      </li>\n  339      <li id=\"fn:2\">\n  340:       <p>There are publishers that start emitting when created, but we’ll not focus on these in this article. <a href=\"#fnref:2\" class=\"reversefootnote\">&#8617;</a></p>\n  341      </li>\n  342    </ol>\n\nC:\\Users\\ThomasK\\Documents\\Projects\\kleinendorst.github.io\\_site\\main\\2017\\10\\03\\microservice-message-solutions.html:\n    6    <title>Reactive blog</title>\n    7    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no\" />\n    8:   <meta name=\"theme-color\" content=\"#157878\">\n    9    <link rel=\"stylesheet\" href=\"/css/normalize.css\">\n   10    <link href='https://fonts.googleapis.com/css?family=Open+Sans:400,700' rel='stylesheet' type='text/css'>\n   ..\n   63  \n   64  <p>Inter-service communication via REST resembles the way we made \n   65: <a href=\"/main/2017/09/22/asynchronous-java.html#blocking-io\">direct calls  between Java methods</a> and shares its disadvantages.\n   66  Threads at multiple services need to block in order to handle a single task.</p>\n   67  \n\nC:\\Users\\ThomasK\\Documents\\Projects\\kleinendorst.github.io\\_site\\page2\\index.html:\n    6    <title>Reactive blog</title>\n    7    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no\" />\n    8:   <meta name=\"theme-color\" content=\"#157878\">\n    9    <link rel=\"stylesheet\" href=\"/css/normalize.css\">\n   10    <link href='https://fonts.googleapis.com/css?family=Open+Sans:400,700' rel='stylesheet' type='text/css'>\n\nC:\\Users\\ThomasK\\Documents\\Projects\\kleinendorst.github.io\\_site\\page3\\index.html:\n    6    <title>Reactive blog</title>\n    7    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no\" />\n    8:   <meta name=\"theme-color\" content=\"#157878\">\n    9    <link rel=\"stylesheet\" href=\"/css/normalize.css\">\n   10    <link href='https://fonts.googleapis.com/css?family=Open+Sans:400,700' rel='stylesheet' type='text/css'>\n\nC:\\Users\\ThomasK\\Documents\\Projects\\kleinendorst.github.io\\_site\\page4\\index.html:\n    6    <title>Reactive blog</title>\n    7    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no\" />\n    8:   <meta name=\"theme-color\" content=\"#157878\">\n    9    <link rel=\"stylesheet\" href=\"/css/normalize.css\">\n   10    <link href='https://fonts.googleapis.com/css?family=Open+Sans:400,700' rel='stylesheet' type='text/css'>\n\nC:\\Users\\ThomasK\\Documents\\Projects\\kleinendorst.github.io\\_site\\page5\\index.html:\n    6    <title>Reactive blog</title>\n    7    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no\" />\n    8:   <meta name=\"theme-color\" content=\"#157878\">\n    9    <link rel=\"stylesheet\" href=\"/css/normalize.css\">\n   10    <link href='https://fonts.googleapis.com/css?family=Open+Sans:400,700' rel='stylesheet' type='text/css'>\n\nC:\\Users\\ThomasK\\Documents\\Projects\\kleinendorst.github.io\\css\\cayman.css:\n    3  .highlight table pre { margin: 0; }\n    4  \n    5: .highlight .cm { color: #999988; font-style: italic; }\n    6  \n    7: .highlight .cp { color: #999999; font-weight: bold; }\n    8  \n    9: .highlight .c1 { color: #999988; font-style: italic; }\n   10  \n   11: .highlight .cs { color: #999999; font-weight: bold; font-style: italic; }\n   12  \n   13: .highlight .c, .highlight .cd { color: #999988; font-style: italic; }\n   14  \n   15: .highlight .err { color: #a61717; background-color: #e3d2d2; }\n   16  \n   17: .highlight .gd { color: #000000; background-color: #ffdddd; }\n   18  \n   19: .highlight .ge { color: #000000; font-style: italic; }\n   20  \n   21: .highlight .gr { color: #aa0000; }\n   22  \n   23: .highlight .gh { color: #999999; }\n   24  \n   25: .highlight .gi { color: #000000; background-color: #ddffdd; }\n   26  \n   27: .highlight .go { color: #888888; }\n   28  \n   29: .highlight .gp { color: #555555; }\n   30  \n   31  .highlight .gs { font-weight: bold; }\n   32  \n   33: .highlight .gu { color: #aaaaaa; }\n   34  \n   35: .highlight .gt { color: #aa0000; }\n   36  \n   37: .highlight .kc { color: #000000; font-weight: bold; }\n   38  \n   39: .highlight .kd { color: #000000; font-weight: bold; }\n   40  \n   41: .highlight .kn { color: #000000; font-weight: bold; }\n   42  \n   43: .highlight .kp { color: #000000; font-weight: bold; }\n   44  \n   45: .highlight .kr { color: #000000; font-weight: bold; }\n   46  \n   47: .highlight .kt { color: #445588; font-weight: bold; }\n   48  \n   49: .highlight .k, .highlight .kv { color: #000000; font-weight: bold; }\n   50  \n   51: .highlight .mf { color: #009999; }\n   52  \n   53: .highlight .mh { color: #009999; }\n   54  \n   55: .highlight .il { color: #009999; }\n   56  \n   57: .highlight .mi { color: #009999; }\n   58  \n   59: .highlight .mo { color: #009999; }\n   60  \n   61: .highlight .m, .highlight .mb, .highlight .mx { color: #009999; }\n   62  \n   63: .highlight .sb { color: #d14; }\n   64  \n   65: .highlight .sc { color: #d14; }\n   66  \n   67: .highlight .sd { color: #d14; }\n   68  \n   69: .highlight .s2 { color: #d14; }\n   70  \n   71: .highlight .se { color: #d14; }\n   72  \n   73: .highlight .sh { color: #d14; }\n   74  \n   75: .highlight .si { color: #d14; }\n   76  \n   77: .highlight .sx { color: #d14; }\n   78  \n   79: .highlight .sr { color: #009926; }\n   80  \n   81: .highlight .s1 { color: #d14; }\n   82  \n   83: .highlight .ss { color: #990073; }\n   84  \n   85: .highlight .s { color: #d14; }\n   86  \n   87: .highlight .na { color: #008080; }\n   88  \n   89: .highlight .bp { color: #999999; }\n   90  \n   91: .highlight .nb { color: #0086B3; }\n   92  \n   93: .highlight .nc { color: #445588; font-weight: bold; }\n   94  \n   95: .highlight .no { color: #008080; }\n   96  \n   97: .highlight .nd { color: #3c5d5d; font-weight: bold; }\n   98  \n   99: .highlight .ni { color: #800080; }\n  100  \n  101: .highlight .ne { color: #990000; font-weight: bold; }\n  102  \n  103: .highlight .nf { color: #990000; font-weight: bold; }\n  104  \n  105: .highlight .nl { color: #990000; font-weight: bold; }\n  106  \n  107: .highlight .nn { color: #555555; }\n  108  \n  109: .highlight .nt { color: #000080; }\n  110  \n  111: .highlight .vc { color: #008080; }\n  112  \n  113: .highlight .vg { color: #008080; }\n  114  \n  115: .highlight .vi { color: #008080; }\n  116  \n  117: .highlight .nv { color: #008080; }\n  118  \n  119: .highlight .ow { color: #000000; font-weight: bold; }\n  120  \n  121: .highlight .o { color: #000000; font-weight: bold; }\n  122  \n  123: .highlight .w { color: #bbbbbb; }\n  124  \n  125: .highlight { background-color: #f8f8f8; }\n  126  \n  127  * { box-sizing: border-box; }\n  128  \n  129: body { padding: 0; margin: 0; font-family: \"Open Sans\", \"Helvetica Neue\", Helvetica, Arial, sans-serif; font-size: 16px; line-height: 1.5; color: #606c71; }\n  130  \n  131: a { color: #1e6bb8; text-decoration: none; }\n  132  a:hover { text-decoration: underline; }\n  133  \n  ...\n  140    .btn + .btn { margin-top: 1rem; margin-left: 0; } }\n  141  \n  142: .page-header { color: #fff; text-align: center; background-color: #159957; background-image: linear-gradient(120deg, #155799, #159957); }\n  143  @media screen and (min-width: 64em) { .page-header { padding: 5rem 6rem; } }\n  144  @media screen and (min-width: 42em) and (max-width: 64em) { .page-header { padding: 3rem 4rem; } }\n  ...\n  161  @media screen and (max-width: 42em) { .main-content { padding: 2rem 1rem; font-size: 1rem; } }\n  162  .main-content img { max-width: 100%; }\n  163: .main-content h1, .main-content h2, .main-content h3, .main-content h4, .main-content h5, .main-content h6 { margin-top: 2rem; margin-bottom: 1rem; font-weight: normal; color: #159957; }\n  164  .main-content p { margin-bottom: 1em; }\n  165: .main-content code { padding: 2px 4px; font-family: Consolas, \"Liberation Mono\", Menlo, Courier, monospace; font-size: 0.9rem; color: #567482; background-color: #f3f6fa; border-radius: 0.3rem; }\n  166: .main-content pre { padding: 0.8rem; margin-top: 0; margin-bottom: 1rem; font: 1rem Consolas, \"Liberation Mono\", Menlo, Courier, monospace; color: #567482; word-wrap: normal; background-color: #f3f6fa; border: solid 1px #dce6f0; border-radius: 0.3rem; }\n  167: .main-content pre > code { padding: 0; margin: 0; font-size: 0.9rem; color: #567482; word-break: normal; white-space: pre; background: transparent; border: 0; }\n  168  .main-content .highlight { margin-bottom: 1rem; }\n  169  .main-content .highlight pre { margin-bottom: 0; word-break: normal; }\n  ...\n  172  .main-content pre code:before, .main-content pre code:after, .main-content pre tt:before, .main-content pre tt:after { content: normal; }\n  173  .main-content ul, .main-content ol { margin-top: 0; }\n  174: .main-content blockquote { padding: 0 1rem; margin-left: 0; color: #819198; border-left: 0.3rem solid #dce6f0; }\n  175  .main-content blockquote > :first-child { margin-top: 0; }\n  176  .main-content blockquote > :last-child { margin-bottom: 0; }\n  177  .main-content table { display: block; width: 100%; overflow: auto; word-break: normal; word-break: keep-all; -webkit-overflow-scrolling: touch; }\n  178  .main-content table th { font-weight: bold; }\n  179: .main-content table th, .main-content table td { padding: 0.5rem 1rem; border: 1px solid #e9ebec; }\n  180  .main-content dl { padding: 0; }\n  181  .main-content dl dt { padding: 0; margin-top: 1rem; font-size: 1rem; font-weight: bold; }\n  182  .main-content dl dd { padding: 0; margin-bottom: 1rem; }\n  183: .main-content hr { height: 2px; padding: 0; margin: 1rem 0; background-color: #eff0f1; border: 0; }\n  184  \n  185: .site-footer { padding-top: 2rem; margin-top: 2rem; border-top: solid 1px #eff0f1; }\n  186  @media screen and (min-width: 64em) { .site-footer { font-size: 1rem; } }\n  187  @media screen and (min-width: 42em) and (max-width: 64em) { .site-footer { font-size: 1rem; } }\n  ...\n  190  .site-footer-owner { display: block; font-weight: bold; }\n  191  \n  192: .site-footer-credits { color: #819198; }\n  193  \n\nC:\\Users\\ThomasK\\Documents\\Projects\\kleinendorst.github.io\\css\\custom.css:\n    1: #profile-pic {\n    2  \twidth: 100px;\n    3  \theight: 100px;\n    .\n   33  .image-container label {\n   34  \tfont-size: .8em;\n   35: \tcolor: #AAA;\n   36  }\n   37  \n\nC:\\Users\\ThomasK\\Documents\\Projects\\kleinendorst.github.io\\css\\normalize.css:\n  143  \n  144  mark {\n  145:   background: #ff0;\n  146:   color: #000;\n  147  }\n  148  \n  ...\n  375  \n  376  fieldset {\n  377:   border: 1px solid #c0c0c0;\n  378    margin: 0 2px;\n  379    padding: 0.35em 0.625em 0.75em;\n\n272 matches across 25 files\n\n\nSearching 41 files for \"#IO\"\n\n0 matches\n\nSearching 41 files for \"#Bloc\"\n\nC:\\Users\\ThomasK\\Documents\\Projects\\kleinendorst.github.io\\_posts\\2017-10-03-microservice-message-solutions.md:\n   32  \n   33  Inter-service communication via REST resembles the way we made \n   34: [direct calls  between Java methods]({% post_url 2017-09-22-asynchronous-java %}#blocking-io) and shares its disadvantages.\n   35  Threads at multiple services need to block in order to handle a single task.\n   36  \n\nC:\\Users\\ThomasK\\Documents\\Projects\\kleinendorst.github.io\\_site\\main\\2017\\10\\03\\microservice-message-solutions.html:\n   63  \n   64  <p>Inter-service communication via REST resembles the way we made \n   65: <a href=\"/main/2017/09/22/asynchronous-java.html#blocking-io\">direct calls  between Java methods</a> and shares its disadvantages.\n   66  Threads at multiple services need to block in order to handle a single task.</p>\n   67  \n\n2 matches across 2 files\n",
			"settings":
			{
				"buffer_size": 47501,
				"line_ending": "Windows",
				"name": "Find Results",
				"scratch": true
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 161.0,
		"last_filter": "settings",
		"selected_items":
		[
			[
				"settings",
				"Preferences: Settings"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"reide",
				"Indentation: Reindent Lines"
			],
			[
				"reiden",
				"Indentation: Reindent Lines"
			],
			[
				"rei",
				"Indentation: Reindent Lines"
			],
			[
				"java",
				"Set Syntax: Java"
			],
			[
				"install package",
				"Package Control: Install Package"
			],
			[
				"set syntax: sass",
				"Set Syntax: Sass"
			],
			[
				"install ",
				"Package Control: Install Package"
			],
			[
				"install p",
				"Package Control: Install Package"
			],
			[
				"package",
				"Install Package Control"
			]
		],
		"width": 442.0
	},
	"console":
	{
		"height": 128.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/C/Users/ThomasK/Documents/Projects/kleinendorst.github.io",
		"/C/Users/ThomasK/Documents/Projects/kleinendorst.github.io/_posts"
	],
	"file_history":
	[
		"/C/Users/ThomasK/Documents/Projects/kleinendorst.github.io/_site/main/2017/09/22/actor-model-introduction.html",
		"/C/Users/ThomasK/Documents/Projects/kleinendorst.github.io/_site/main/2017/10/03/microservice-message-solutions.html",
		"/C/Users/ThomasK/Documents/Projects/kleinendorst.github.io/_posts/2017-09-29-reactive-streams.md",
		"/C/Users/ThomasK/Documents/Projects/kleinendorst.github.io/_posts/2017-09-25-actor-model-supervision.md",
		"/C/Users/ThomasK/Documents/Projects/kleinendorst.github.io/_site/main/2017/09/29/reactive-streams.html",
		"/C/Users/ThomasK/Documents/Projects/kleinendorst.github.io/_posts/2017-09-22-actor-model-introduction.md",
		"/C/Users/ThomasK/Documents/Projects/kleinendorst.github.io/_config.yml",
		"/C/Users/ThomasK/Documents/Projects/kleinendorst.github.io/_posts/2017-09-22-asynchronous-java.md",
		"/C/Users/ThomasK/Documents/Projects/kleinendorst.github.io/_includes/disqus.html",
		"/C/Users/ThomasK/Documents/Projects/kleinendorst.github.io/_layouts/default.html",
		"/C/Users/ThomasK/Documents/Projects/kleinendorst.github.io/_layouts/post.html",
		"/C/Users/ThomasK/Documents/Projects/kleinendorst.github.io/_includes/about-author.html",
		"/C/Users/ThomasK/Documents/Projects/kleinendorst.github.io/css/custom.css",
		"/C/Users/ThomasK/Documents/Projects/kleinendorst.github.io/_includes/head.html",
		"/C/Users/ThomasK/Documents/Projects/kleinendorst.github.io/_includes/page-footer.html",
		"/C/Users/ThomasK/Documents/Projects/kleinendorst.github.io/_layouts/about-author.html",
		"/C/Users/ThomasK/Desktop/failure.PNG",
		"/C/Users/ThomasK/Documents/Projects/kleinendorst.github.io/_includes/page-header.html",
		"/C/Users/ThomasK/Documents/Projects/kleinendorst.github.io/_posts/2017-05-13-asynchronous-java.md",
		"/C/Users/ThomasK/Documents/Projects/kleinendorst.github.io/_posts/2017-04-13-test-page.md",
		"/C/Users/ThomasK/Documents/Projects/kleinendorst.github.io/index.html",
		"/C/Users/ThomasK/Documents/Projects/kleinendorst.github.io/_posts/2016-02-12-sample-content.markdown",
		"/C/Users/ThomasK/Documents/Projects/kleinendorst.github.io/_posts/2017-09-22-Asynchronous-Java.md",
		"/C/Users/ThomasK/Documents/Projects/kleinendorst.github.io/_posts/test-page.md",
		"/C/Users/ThomasK/Documents/Projects/kleinendorst.github.io/_site/index.html",
		"/C/Users/ThomasK/Documents/Projects/kleinendorst.github.io/Gemfile",
		"/C/Users/ThomasK/Documents/Projects/jekyll-cayman-theme-master/_config.yml",
		"/C/Users/ThomasK/Documents/Projects/jekyll-cayman-theme-master/README.md",
		"/C/Users/ThomasK/Documents/Projects/kleinendorst.github.io/.gitignore",
		"/C/Users/ThomasK/Desktop/result.txt"
	],
	"find":
	{
		"height": 40.0
	},
	"find_in_files":
	{
		"height": 104.0,
		"where_history":
		[
			""
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"actorOf",
			"#Bloc",
			"#IO",
			"#",
			"](/2017/09/22/actor-model-introduction.html",
			"> Q",
			"scan"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "_posts/2017-10-03-microservice-message-solutions.md",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3882,
						"regions":
						{
						},
						"selection":
						[
							[
								2838,
								2838
							]
						],
						"settings":
						{
							"syntax": "Packages/Markdown/Markdown.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 332.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 1,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 47501,
						"regions":
						{
							"match":
							{
								"flags": 112,
								"regions":
								[
									[
										107,
										108
									],
									[
										243,
										244
									],
									[
										375,
										376
									],
									[
										437,
										438
									],
									[
										452,
										453
									],
									[
										496,
										497
									],
									[
										545,
										546
									],
									[
										695,
										696
									],
									[
										1043,
										1044
									],
									[
										1753,
										1754
									],
									[
										1754,
										1755
									],
									[
										2158,
										2159
									],
									[
										2159,
										2160
									],
									[
										2456,
										2457
									],
									[
										2457,
										2458
									],
									[
										3082,
										3083
									],
									[
										3083,
										3084
									],
									[
										4332,
										4333
									],
									[
										4333,
										4334
									],
									[
										4938,
										4939
									],
									[
										4939,
										4940
									],
									[
										5484,
										5485
									],
									[
										5485,
										5486
									],
									[
										6195,
										6196
									],
									[
										6196,
										6197
									],
									[
										6914,
										6915
									],
									[
										6915,
										6916
									],
									[
										7038,
										7039
									],
									[
										7039,
										7040
									],
									[
										7815,
										7816
									],
									[
										8125,
										8126
									],
									[
										8126,
										8127
									],
									[
										9310,
										9311
									],
									[
										9311,
										9312
									],
									[
										9682,
										9683
									],
									[
										9683,
										9684
									],
									[
										10256,
										10257
									],
									[
										10696,
										10697
									],
									[
										11303,
										11304
									],
									[
										11304,
										11305
									],
									[
										11594,
										11595
									],
									[
										11595,
										11596
									],
									[
										12434,
										12435
									],
									[
										12435,
										12436
									],
									[
										12721,
										12722
									],
									[
										12722,
										12723
									],
									[
										13347,
										13348
									],
									[
										13348,
										13349
									],
									[
										13735,
										13736
									],
									[
										14023,
										14024
									],
									[
										14024,
										14025
									],
									[
										14624,
										14625
									],
									[
										14909,
										14910
									],
									[
										15137,
										15138
									],
									[
										15207,
										15208
									],
									[
										15276,
										15277
									],
									[
										15346,
										15347
									],
									[
										15450,
										15451
									],
									[
										15521,
										15522
									],
									[
										15548,
										15549
									],
									[
										15598,
										15599
									],
									[
										15625,
										15626
									],
									[
										15675,
										15676
									],
									[
										15745,
										15746
									],
									[
										15795,
										15796
									],
									[
										15845,
										15846
									],
									[
										15872,
										15873
									],
									[
										15922,
										15923
									],
									[
										15972,
										15973
									],
									[
										16075,
										16076
									],
									[
										16125,
										16126
									],
									[
										16175,
										16176
									],
									[
										16244,
										16245
									],
									[
										16313,
										16314
									],
									[
										16382,
										16383
									],
									[
										16451,
										16452
									],
									[
										16520,
										16521
									],
									[
										16604,
										16605
									],
									[
										16673,
										16674
									],
									[
										16723,
										16724
									],
									[
										16773,
										16774
									],
									[
										16823,
										16824
									],
									[
										16873,
										16874
									],
									[
										16954,
										16955
									],
									[
										17004,
										17005
									],
									[
										17051,
										17052
									],
									[
										17098,
										17099
									],
									[
										17145,
										17146
									],
									[
										17192,
										17193
									],
									[
										17239,
										17240
									],
									[
										17286,
										17287
									],
									[
										17333,
										17334
									],
									[
										17380,
										17381
									],
									[
										17430,
										17431
									],
									[
										17477,
										17478
									],
									[
										17526,
										17527
									],
									[
										17573,
										17574
									],
									[
										17623,
										17624
									],
									[
										17673,
										17674
									],
									[
										17723,
										17724
									],
									[
										17792,
										17793
									],
									[
										17842,
										17843
									],
									[
										17911,
										17912
									],
									[
										17961,
										17962
									],
									[
										18030,
										18031
									],
									[
										18099,
										18100
									],
									[
										18168,
										18169
									],
									[
										18218,
										18219
									],
									[
										18268,
										18269
									],
									[
										18318,
										18319
									],
									[
										18368,
										18369
									],
									[
										18418,
										18419
									],
									[
										18468,
										18469
									],
									[
										18536,
										18537
									],
									[
										18604,
										18605
									],
									[
										18661,
										18662
									],
									[
										18878,
										18879
									],
									[
										18915,
										18916
									],
									[
										19108,
										19109
									],
									[
										19152,
										19153
									],
									[
										19203,
										19204
									],
									[
										19212,
										19213
									],
									[
										19751,
										19752
									],
									[
										19950,
										19951
									],
									[
										19977,
										19978
									],
									[
										20165,
										20166
									],
									[
										20211,
										20212
									],
									[
										20238,
										20239
									],
									[
										20355,
										20356
									],
									[
										20861,
										20862
									],
									[
										20896,
										20897
									],
									[
										21343,
										21344
									],
									[
										21640,
										21641
									],
									[
										21751,
										21752
									],
									[
										22062,
										22063
									],
									[
										22170,
										22171
									],
									[
										22308,
										22309
									],
									[
										22459,
										22460
									],
									[
										22481,
										22482
									],
									[
										22563,
										22564
									],
									[
										22950,
										22951
									],
									[
										23424,
										23425
									],
									[
										23959,
										23960
									],
									[
										24214,
										24215
									],
									[
										24249,
										24250
									],
									[
										24406,
										24407
									],
									[
										24441,
										24442
									],
									[
										24794,
										24795
									],
									[
										25182,
										25183
									],
									[
										25784,
										25785
									],
									[
										25918,
										25919
									],
									[
										26585,
										26586
									],
									[
										27396,
										27397
									],
									[
										27479,
										27480
									],
									[
										28168,
										28169
									],
									[
										28203,
										28204
									],
									[
										28452,
										28453
									],
									[
										28487,
										28488
									],
									[
										28756,
										28757
									],
									[
										28791,
										28792
									],
									[
										28960,
										28961
									],
									[
										28995,
										28996
									],
									[
										29187,
										29188
									],
									[
										29222,
										29223
									],
									[
										29406,
										29407
									],
									[
										29441,
										29442
									],
									[
										29800,
										29801
									],
									[
										30227,
										30228
									],
									[
										31023,
										31024
									],
									[
										31058,
										31059
									],
									[
										31410,
										31411
									],
									[
										31793,
										31794
									],
									[
										34040,
										34041
									],
									[
										35042,
										35043
									],
									[
										35638,
										35639
									],
									[
										35883,
										35884
									],
									[
										35918,
										35919
									],
									[
										36102,
										36103
									],
									[
										36137,
										36138
									],
									[
										36503,
										36504
									],
									[
										36829,
										36830
									],
									[
										37292,
										37293
									],
									[
										37759,
										37760
									],
									[
										38226,
										38227
									],
									[
										38693,
										38694
									],
									[
										39034,
										39035
									],
									[
										39104,
										39105
									],
									[
										39173,
										39174
									],
									[
										39243,
										39244
									],
									[
										39347,
										39348
									],
									[
										39418,
										39419
									],
									[
										39445,
										39446
									],
									[
										39495,
										39496
									],
									[
										39522,
										39523
									],
									[
										39572,
										39573
									],
									[
										39642,
										39643
									],
									[
										39692,
										39693
									],
									[
										39742,
										39743
									],
									[
										39769,
										39770
									],
									[
										39819,
										39820
									],
									[
										39869,
										39870
									],
									[
										39972,
										39973
									],
									[
										40022,
										40023
									],
									[
										40072,
										40073
									],
									[
										40141,
										40142
									],
									[
										40210,
										40211
									],
									[
										40279,
										40280
									],
									[
										40348,
										40349
									],
									[
										40417,
										40418
									],
									[
										40501,
										40502
									],
									[
										40570,
										40571
									],
									[
										40620,
										40621
									],
									[
										40670,
										40671
									],
									[
										40720,
										40721
									],
									[
										40770,
										40771
									],
									[
										40851,
										40852
									],
									[
										40901,
										40902
									],
									[
										40948,
										40949
									],
									[
										40995,
										40996
									],
									[
										41042,
										41043
									],
									[
										41089,
										41090
									],
									[
										41136,
										41137
									],
									[
										41183,
										41184
									],
									[
										41230,
										41231
									],
									[
										41277,
										41278
									],
									[
										41327,
										41328
									],
									[
										41374,
										41375
									],
									[
										41423,
										41424
									],
									[
										41470,
										41471
									],
									[
										41520,
										41521
									],
									[
										41570,
										41571
									],
									[
										41620,
										41621
									],
									[
										41689,
										41690
									],
									[
										41739,
										41740
									],
									[
										41808,
										41809
									],
									[
										41858,
										41859
									],
									[
										41927,
										41928
									],
									[
										41996,
										41997
									],
									[
										42065,
										42066
									],
									[
										42115,
										42116
									],
									[
										42165,
										42166
									],
									[
										42215,
										42216
									],
									[
										42265,
										42266
									],
									[
										42315,
										42316
									],
									[
										42365,
										42366
									],
									[
										42433,
										42434
									],
									[
										42501,
										42502
									],
									[
										42558,
										42559
									],
									[
										42775,
										42776
									],
									[
										42812,
										42813
									],
									[
										43005,
										43006
									],
									[
										43049,
										43050
									],
									[
										43100,
										43101
									],
									[
										43109,
										43110
									],
									[
										43648,
										43649
									],
									[
										43847,
										43848
									],
									[
										43874,
										43875
									],
									[
										44062,
										44063
									],
									[
										44108,
										44109
									],
									[
										44135,
										44136
									],
									[
										44252,
										44253
									],
									[
										44758,
										44759
									],
									[
										44793,
										44794
									],
									[
										45240,
										45241
									],
									[
										45537,
										45538
									],
									[
										45648,
										45649
									],
									[
										45959,
										45960
									],
									[
										46061,
										46062
									],
									[
										46199,
										46200
									],
									[
										46344,
										46345
									],
									[
										46366,
										46367
									],
									[
										46448,
										46449
									],
									[
										46904,
										46909
									],
									[
										47296,
										47301
									]
								],
								"scope": ""
							}
						},
						"selection":
						[
							[
								46906,
								46906
							]
						],
						"settings":
						{
							"default_dir": "C:\\Users\\ThomasK\\Documents\\Projects\\kleinendorst.github.io",
							"detect_indentation": false,
							"line_numbers": false,
							"output_tag": 3,
							"result_base_dir": "",
							"result_file_regex": "^([^ \t].*):$",
							"result_line_regex": "^ +([0-9]+):",
							"scroll_past_end": true,
							"syntax": "Packages/Default/Find Results.hidden-tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 16701.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 27.0
	},
	"input":
	{
		"height": 45.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.doc":
	{
		"height": 0.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "sublime_settings.sublime-project",
	"replace":
	{
		"height": 50.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"actor",
				"_site\\main\\2017\\09\\22\\actor-model-introduction.html"
			],
			[
				"microser",
				"_posts\\2017-10-03-microservice-message-solutions.md"
			],
			[
				"micro",
				"_site\\main\\2017\\10\\03\\microservice-message-solutions.html"
			],
			[
				"reac",
				"_posts\\2017-09-29-reactive-streams.md"
			],
			[
				"reactiv",
				"_posts\\2017-09-29-reactive-streams.md"
			],
			[
				"react",
				"_site\\main\\2017\\09\\29\\reactive-streams.html"
			],
			[
				"custo",
				"css\\custom.css"
			],
			[
				"confi",
				"_config.yml"
			],
			[
				"page",
				"_includes\\page-footer.html"
			],
			[
				"inde",
				"index.html"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 331.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
